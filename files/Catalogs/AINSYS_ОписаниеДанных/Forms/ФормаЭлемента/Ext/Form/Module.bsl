&НаСервере
Процедура СкопироватьДеревоВДерево(КоллекцияЭлементовДереваПолучатель, деревоИсточник)
	Для Каждого строкаИсточник из деревоИсточник.Строки Цикл
		ЭлементДерева = КоллекцияЭлементовДереваПолучатель.Добавить();
		ЗаполнитьЗначенияСвойств(ЭлементДерева, строкаИсточник);
		
		СкопироватьДеревоВДерево(ЭлементДерева.ПолучитьЭлементы(), строкаИсточник);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ВыбОбъект = РеквизитФормыВЗначение("Объект");
	
	дерево = AINSYS_сервер.ВыгрузитьТаблицуЗначенийВДеревоЗначений(ВыбОбъект.ПоляОбъектаДанных.Выгрузить(), "КлючСтроки", "КлючРодителя");
	
	СкопироватьДеревоВДерево(ОписаниеИнтерфейса.ПолучитьЭлементы(), дерево);
	
	УзелРегистрацииИзменений = AINSYS_сервер.ПолучитьСсылкуПоИД(xmlСтрока(ВыбОбъект.УзелОбмена), ВыбОбъект.ВидПланаОбмена);
	ЭлементОтбора = ЖурналСобытий.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПравилоОбмена");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = ВыбОбъект.Ссылка;
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере(Отказ)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	AINSYS_НовыеПоля.ДатаПолучения КАК ДатаПолучения,
	               |	AINSYS_НовыеПоля.НовыеПоля КАК НовыеПоля,
	               |	AINSYS_НовыеПоля.ПолученныеДанные КАК ПолученныеДанные
	               |ИЗ
	               |	РегистрСведений.AINSYS_НовыеПоля КАК AINSYS_НовыеПоля
	               |ГДЕ
	               |	AINSYS_НовыеПоля.ПравилоОбмена = &ПравилоОбмена
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаПолучения УБЫВ";
	Запрос.УстановитьПараметр("ПравилоОбмена", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НовыеПоля = "Новые поля:
						|" + Выборка.НовыеПоля + "
						|
						|Полученные данные:
						|" + Выборка.ПолученныеДанные + "
						|
						|Получено:
						|" + Формат(Выборка.ДатаПолучения, "ДФ=dd.MM.yyyy");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПроставитьКлючиВДереве(СтрокиДерева, НомерСтроки = 1, РодительскаяСтрока = Неопределено)
	уид = xmlСтрока(Объект.Ссылка);
	// Проставим ключи в дерева
	Для Каждого стрДерева из СтрокиДерева Цикл
		стрДерева.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
		Если РодительскаяСтрока = Неопределено Тогда
			стрДерева.КлючСтроки = уид + стрДерева.ИмяПоля;
			стрДерева.КлючРодителя = "";
		Иначе
			стрДерева.КлючРодителя = РодительскаяСтрока.КлючСтроки;
			стрДерева.КлючСтроки = РодительскаяСтрока.КлючСтроки + стрДерева.ИмяПоля;
		КонецЕсли;
		ПроставитьКлючиВДереве(стрДерева.Строки, НомерСтроки, стрДерева);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Дерево = РеквизитФормыВЗначение("ОписаниеИнтерфейса");
	
	ПроставитьКлючиВДереве(Дерево.Строки);
	
	ТекущийОбъект.ПоляОбъектаДанных.Очистить();
	AINSYS_сервер.ВыгрузитьДеревоЗначенийВТаблицуЗначений(Дерево, ТекущийОбъект.ПоляОбъектаДанных);
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьВидимость()
	Если Объект.СпособВыборкиДанных = ПредопределенноеЗначение("Перечисление.AINSYS_СпособВыбокиДанных.СКД") Тогда
		ЭтаФорма.Элементы.ГруппаСКД.Видимость = Истина;
	Иначе
		ЭтаФорма.Элементы.ГруппаСКД.Видимость = Ложь;
	КонецЕсли;
	
	Если ЭтаФорма.Элементы.Вкладки.ТекущаяСтраница = ЭтаФорма.Элементы.ВкладкаОбработкаВыгрузки Тогда
		HtmlКод = РаскраситьНаСервере(Объект.ОбработкаВыгрузки);
	ИначеЕсли ЭтаФорма.Элементы.Вкладки.ТекущаяСтраница = ЭтаФорма.Элементы.ВкладкаОбработкаЗагрузки Тогда
		HtmlКод = РаскраситьНаСервере(Объект.ОбработкаЗагрузки);
	ИначеЕсли ЭтаФорма.Элементы.Вкладки.ТекущаяСтраница = ЭтаФорма.Элементы.ВкладкаОтправкаДанныхКорУзлу Тогда
		HtmlКод = РаскраситьНаСервере(Объект.ОбработкаОтправкиДанныхКорУзлу);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПриОткрытииНаСервере(Отказ);
	ОпределитьВидимость();
	
	ЭтаФорма.Элементы.ТекстПодсказкиВыгрузки.Заголовок = "Доступны переменные:
					|ЭтоПравило - ссылка на данное правило
					|ВыборкаВыгрузки - ДеревоЗначений - при использовании схемы компоновки данных (СКД) там уже будут данные. Этот объект можно изменять.
					|			В колонку AINSYS_ИмяГруппировки обязательно нужно писать имя текущей группировки. Для корневых строк наименование описания данных.
					|Парамаетры - Структура - с полями
					|						Количество - количество объектов, кторое надо вернуть
					|						Смещение - с какого объекта надо начать отсчёт
					|						сзСсылки - СписокЗначений - список изменённых объектов, если запрошены только изменённые или Неопределено, если запрошены все
					|						стркОтбор - Структура - с полями по которым нужно выполнить отбор. СКД выполняется с эти отбором. Если СКД не используется, то обработать нужно вручную.
					|ВАЖНО! Для корректной отправки изменённых данных в описании данных должно присутствовать поле Ссылка. Именно по нему система определит какие именно данные отправлены и снимет флаг изменённости.";
	ЭтаФорма.Элементы.ТекстПодсказкиОбработкаЗагрузки.Заголовок = "Доступна переменная:
					|стркСДанными - Структура - содержит поля:
					|					Данные - Массив - с объектами для загрузки
					|					Действие - строка, описывающее действие ADD, UPDATE, DELETE
					|					Ошибка - Строка - сюда пишем ошибки, если такие возникнут
					|					Правило - СправочникСсылка.AINSYS_ОписаниеДанных - ссылка на текущее правило обмена";
	ЭтаФорма.Элементы.ТекстПодсказкиОбработкаОтправкиДанных.Заголовок = "Периодически отправляет данные, возвращаемые СКД или обработкой выгрузки, по адресу, указанному в плане синхронизации" +
					" Если обработка отправки данных не заполнена, то отправится всё, что даст обработка выгрузки.
					|Для отправки необходимо вызвать функцию ОтправитьДанные. Эта функция вернёт структуру с полями Ошибка и ОтветСервера.
					|Параметры функции:
					|	ссылкаНаПравило - СправочникСсылка.AINSYS_ОписаниеДанных - Обязательный. Сюда необходимо указть ЭтоПравило
					|	Количество - Число - Необязательный. Количество объектов, которые нужно отправить
					|	Смещение - Число - Необязательный. С какого объекта необходимо начать отсчёт 
					|	Измененные - Булево - Необязательный. Отправлять только изменённые. Имеет смысл указывать только при заполненном узле регистрации изменений
					|	Отбор - Структура - Необязательный. Структура с полями,  соответствующими описанию данных. При отправке в выборку попрадут объекты, соответствующие отбору."
					+ "Отбор возможен только по первому уровню в описании данных. Иначе говоря - до первой точки.
					|Доступны переменные:
					|	ЭтоПравило - ссылка на данное правило
					|Пример кода:
					|	стркОтбор = Новый Структура(""Номер"", ""КС00-004478"");
					|	РезультатОтправки = ОтправитьДанные(ЭтоПравило,,,, стркОтбор);
					|ВАЖНО! Для корректной отправки изменённых данных в описании данных должно присутствовать поле Ссылка. Именно по нему система определит какие именно данные отправлены и снимет флаг изменённости.";
	
КонецПроцедуры

&НаКлиенте
Процедура СпособВыборкиДанныхПриИзменении(Элемент)
	ОпределитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСКДОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	#Если ТолстыйКлиентУправляемоеПриложение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
		РедактироватьСКД();
	#Иначе
		ПоказатьПредупреждение(, "Редактирование схемы компоновки данных возможно только в толстом клиенте.", 60, "Перезапустите 1С в соответствующем режиме");
	#КонецЕсли
КонецПроцедуры

#Если ТолстыйКлиентУправляемоеПриложение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
&НаКлиенте
Процедура РедактироватьСКД()
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Объект.СКД);
	Попытка
		СКД = СериализаторXDTO.ПрочитатьXML(ЧтениеXML, Тип("СхемаКомпоновкиДанных"));
	Исключение
		СКД = Новый СхемаКомпоновкиДанных;
	КонецПопытки;

	Попытка
		КонструкторСКД = Новый КонструкторСхемыКомпоновкиДанных;
	Исключение
		Сообщить("Схему компоновки данных возможно редактировать только в толстом клиенте. Запустите 1С в соответствующем режиме.");
		Возврат;
	КонецПопытки;
    КонструкторСКД.УстановитьСхему(СКД);
    КонструкторСКД.Редактировать(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Если ТипЗнч(Источник) = Тип("КонструкторСхемыКомпоновкиДанных") Тогда
        СКД = Источник.ПолучитьСхему();
        
        ЗаписьXML = Новый ЗаписьXML;
        ЗаписьXML.УстановитьСтроку();
        СериализаторXDTO.ЗаписатьXML(ЗаписьXML, СКД, "dataCompositionSchema", "http://v8.1c.ru/8.1/data-composition-system/schema");
		Объект.СКД = ЗаписьXML.Закрыть();
	КонецЕсли;
	
КонецПроцедуры
#КонецЕсли

&НаСервереБезКонтекста
Функция РаскраситьНаСервере(ФорматируемыйКод)
	РезультатHTML = AINSYS_сервер.РаскраситьТекст(ФорматируемыйКод);
	Возврат РезультатHTML;
КонецФункции

&НаКлиенте
Процедура ОбработкаВыгрузкиПриИзменении(Элемент)
	ОпределитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗагрузкиПриИзменении(Элемент)
	ОпределитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСобытийПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ОпределитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ПосмотретьВыгружаемыеДанные(Команда)
	Если ЭтаФорма.Модифицированность Тогда
		ПоказатьПредупреждение(, "Перед исполнением правило необходимо записать.");
		Возврат;
	КонецЕсли;
	стркРезультат = ПосмотретьВыгружаемыеДанныеНаСервере(Объект.Ссылка);
	Если ТипЗнч(стркРезультат.Данные) = Тип("ТабличныйДокумент") Тогда
		стркРезультат.Данные.Показать(Объект.Наименование);
	Иначе
		Сообщить(стркРезультат.Ошибка);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПосмотретьВыгружаемыеДанныеНаСервере(Ссылка)
	стркРезультат = Справочники.AINSYS_ОписаниеДанных.ПолучитьВыгружаемыеДанные(Ссылка, "", 100, 0, Ложь);
	Возврат стркРезультат;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДеревоНастроекСКД(ТекстСКД)
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстСКД);
	Попытка
		СКД = СериализаторXDTO.ПрочитатьXML(ЧтениеXML, Тип("СхемаКомпоновкиДанных"));
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	
	Если ПустаяСтрока(Ошибка) Тогда
		ДеревоОтчета = Справочники.AINSYS_ОписаниеДанных.ПолучитьДеревоОтчета(СКД.ВариантыНастроек[0].Настройки);	
	Иначе
		Возврат Ошибка;
	КонецЕсли;
	
	Возврат ДеревоОтчета;
КонецФункции

&НаСервере
Функция ПолучитьСтрокуПоИмени(ВладелецСтрок, ИмяПоля)
	Результат = Неопределено;
	Для Каждого стр из ВладелецСтрок.Строки Цикл
		Если стр.ИмяПоля = ИмяПоля Тогда
			Результат = стр;
			Прервать
		КонецЕсли;
		Если стр.Строки.Количество() > 0 Тогда
			ПолучитьСтрокуПоИмени(стр, ИмяПоля);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ЗаполнитьОписаниеИнтерфейса(деревоОписаниеИнтерфейса, деревоНастроекОтчета, ИмяСтрокиВладельца = "")
	Для Каждого стр из деревоНастроекОтчета.Строки Цикл
		Если Не ПустаяСтрока(ИмяСтрокиВладельца) Тогда
			стрРодитель = ПолучитьСтрокуПоИмени(деревоОписаниеИнтерфейса, ИмяСтрокиВладельца);
			Если стрРодитель = Неопределено Тогда
				стрРодитель = деревоОписаниеИнтерфейса.Строки.Добавить();
				стрРодитель.ИмяПоля = ИмяСтрокиВладельца;
				стрРодитель.ТипПоля = ПредопределенноеЗначение("Перечисление.AINSYS_ТипыДанных.Массив");
			КонецЕсли;
			ТекущаяСтрока = стрРодитель.Строки.Добавить();
		Иначе
			ТекущаяСтрока = деревоОписаниеИнтерфейса.Строки.Добавить();
		КонецЕсли;
		ТекущаяСтрока.ИмяПоля = стр.ИмяПоля;
		ТекущаяСтрока.Описание = стр.ОписаниеПоля;
		ТекущаяСтрока.КлючСтроки = xmlСтрока(Объект.Ссылка) + ТекущаяСтрока.ИмяПоля;
		ТекущаяСтрока.КлючРодителя = xmlСтрока(Объект.Ссылка) + ИмяСтрокиВладельца;
		Если стр.Строки.Количество() > 0 Тогда
			ЗаполнитьОписаниеИнтерфейса(деревоОписаниеИнтерфейса, стр, стр.ИмяПоля);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ЗаполнитьПоСКДНаСервере()
	деревоНастроекОтчета = ПолучитьДеревоНастроекСКД(Объект.СКД);
	
	Если ТипЗнч(деревоНастроекОтчета) = Тип("Строка") Тогда
		Возврат деревоНастроекОтчета;
	КонецЕсли;
	
	деревоОписаниеИнтерфейса = РеквизитФормыВЗначение("ОписаниеИнтерфейса");
	деревоОписаниеИнтерфейса.Строки.Очистить();
	ЗаполнитьОписаниеИнтерфейса(деревоОписаниеИнтерфейса, деревоНастроекОтчета);
	ЗначениеВРеквизитФормы(деревоОписаниеИнтерфейса, "ОписаниеИнтерфейса");
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоСКД(Команда)
	Ошибка = ЗаполнитьПоСКДНаСервере();
	Если Не ПустаяСтрока(Ошибка) Тогда
		ПоказатьПредупреждение(, "Схема компоновки данных отсутствует или разрушена", 60, "Ошибка чтения схемы компоновки данных");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВедущийОбъектРегистрацииИзмененийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		Объект.ВедущийОбъектРегистрацииИзменений = ВыбранноеЗначение.Тип + "." + ВыбранноеЗначение.Вид;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВедущийОбъектРегистрацииИзмененийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ФормаВыбораВида = ПолучитьФорму("Справочник.AINSYS_ОписаниеДанных.Форма.ФормаВыбораВидаОбъекта", , ЭтаФорма.Элементы.ВедущийОбъектРегистрацииИзменений);
	ФормаВыбораВида.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаВыбораВида.ЗакрыватьПриВыборе = Истина;
	ФормаВыбораВида.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура УзелРегистрацииИзмененийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура("ВыбСсылка, ВыбранныйТип, РежимВыбора", УзелРегистрацииИзменений, "ПланОбмена", "ВыборОбъекта");
	ФормаВыбораВида = ПолучитьФорму("Справочник.AINSYS_ОписаниеДанных.Форма.ФормаВыбораВидаОбъекта", СтруктураПараметров, ЭтаФорма.Элементы.УзелРегистрацииИзменений);
	ФормаВыбораВида.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаВыбораВида.ЗакрыватьПриВыборе = Истина;
	ФормаВыбораВида.Открыть();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяМетаданных(выбСсылка)
	мд = выбСсылка.Метаданные();
	Возврат мд.имя;
КонецФункции

&НаКлиенте
Процедура УзелРегистрацииИзмененийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	УзелРегистрацииИзменений = ВыбранноеЗначение;
	Объект.УзелОбмена = ВыбранноеЗначение.УникальныйИдентификатор();
	Объект.ВидПланаОбмена = ИмяМетаданных(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСейчас(Команда)
	Если ЭтаФорма.Модифицированность Тогда
		ПоказатьПредупреждение(, "Для отправки данных правило необходимо записать.", 60, "Запишите элемент справочника");
		Возврат;
	КонецЕсли;
	рез = ОтправитьССервера(Объект.Ссылка);
	
	Если Не ПустаяСтрока(рез) Тогда
		Текст = Новый ТекстовыйДокумент;
		Текст.УстановитьТекст(рез);
		Текст.Показать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОтправитьССервера(Ссылка)
	
	стркРезультат = Справочники.AINSYS_ОписаниеДанных.ОтправитьДанныеКорУзлу(Ссылка);
	
	стрРез = "";	
	Если Не ПустаяСтрока(стркРезультат.Ошибка) Тогда
		стрРез = "Ошибка: " + стркРезультат.Ошибка;
	КонецЕсли;
	
	Если ПоказатьРезультатОтправки Тогда
		стрРез = стрРез + "
		|Отправленные данные: " + стркРезультат.ОтправленныеДанные;
		
		Если ЗначениеЗаполнено(стркРезультат.ОтветСервера) Тогда
			ОтветСервера = AINSYS_HTTP.РаспаковатьОтвет(стркРезультат.ОтветСервера);
			запрос = Новый HTTPЗапрос;
			запрос.УстановитьТелоИзДвоичныхДанных(ОтветСервера);
			ОтветСервера = запрос.ПолучитьТелоКакСтроку();
			
			стрРез = стрРез + "
			|Ответ сервера: " + ОтветСервера;
		КонецЕсли;
		
	Иначе
		Возврат стркРезультат.Ошибка;
	КонецЕсли;
	Возврат стрРез;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОтправкиДанныхКорУзлуПриИзменении(Элемент)
	ОпределитьВидимость();
КонецПроцедуры
